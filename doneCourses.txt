using System;
using System.IO;
using System.Text;

namespace Testing
{
    internal abstract class Program
    {
        private static void Main()
        {
            User artem = new User("Artem", "cheezballz03@gmail.com", "artemartem",18);
            User.AddToList(artem);
            
            User misha = new User("Misha", "KPI@gmail.com", "mishamisha",20);
            User.AddToList(misha);

            Admin admin = new Admin("Admin", "none", "adminadmin",22,"admin");
            User.AddToList(admin);

            User ceo = new Admin("Dima", "coolpenis2004@mail.ru", "coolpassword",28,"CEO");
            User.AddToList(ceo);

            PrintAllInfo();
            
            PrintCount();
            
            admin.GetRole();

            Car bmw = new Car(250.5f);
            Console.WriteLine($"Speed: {bmw.getSpeed()}");

            Car.Engine bmwEngine = new Car.Engine();
            bmwEngine.StartEngine(true);
            Console.WriteLine($"Is engine started? \t {bmwEngine.GetIsStart()}");
            
            Console.ReadKey();
        }

        private static void PrintAllInfo()
        {
            if (User.UserList.Count!=0)
            {
                foreach (var user in User.UserList)
                {
                    user.PrintInfo();
                }
            }
            else
            {
                Console.WriteLine("No users in the list!");
            }
        }


        private static void PrintCount()
        {
            Console.WriteLine($"Number of users: {User.UserList.Count}\n");
        }
    }
}

//class User in separate file

namespace Testing;

public class User
{
    public static readonly List<User> UserList = new List<User>();
    protected string Name;
    protected string Email;
    protected string Password;
    protected sbyte age;

    protected sbyte Age
    {
        get
        {
            return age;
        }
        set
        {
            if (value < 0)
            {
                this.age = 1;
            }
            else
            {
                age = value;
            }
        }
    }

    private static int _count;

    protected User()
    {
        _count++;
    }

    public User(string name, string email, string password, sbyte age)
    {
        this.Name = name;
        this.Email = email;
        this.Password = password;
        Age = age;
        
        _count++;
    }
    
    public virtual void PrintInfo()
    {
        Console.WriteLine($"Users name: {Name}");
        Console.WriteLine($"Users email: {Email}");
        Console.WriteLine($"Users password: {Password}");
        Console.WriteLine($"Users age: {age}\n");
    }

    public static void AddToList(User user)
    {
        UserList.Add(user);
    }
    
}

//class Admin in separate file


namespace Testing;

public class Admin : User
{
    private string? _role;

    public void GetRole()
    {
        Console.WriteLine($"{Name}'s role: {_role}\n");
    }
    
    public Admin():base()
    {
        this._role = "Unknown";
    }
    public Admin(string name, string email, string password, sbyte age, string? role) : base(name,email,password,age)
    {
        this.Name = name;
        this.Email = email;
        this.Password = password;
        Age = age;
        _role = role;
    }
    
    public override void PrintInfo()
    {
        Console.WriteLine($"Users name: {Name}");
        Console.WriteLine($"Users email: {Email}");
        Console.WriteLine($"Users password: {Password}");
        Console.WriteLine($"Users age: {age}");
        Console.WriteLine($"Users role: {_role}\n");
    }
}

//class Car in separate file

namespace Testing;

public class Car
{
    protected float speed;

    public Car(float speed)
    {
        this.speed = speed;
    }

    public float getSpeed()
    {
        return speed;
    }

    public class Engine
    {
        private bool isStart;

        public void StartEngine(bool isStart)
        {
            this.isStart = isStart;
        }

        public bool GetIsStart()
        {
            return isStart;
        }
    }
}

//Threading

using System;
using System.Threading;

namespace Testing
{
    internal abstract class Program
    {
        public static int count;

        //private static object locker = new object();
        
        private static void Main()
        {
            for (int i = 0; i < 10; i++)
            {
                Thread tr = new Thread(printSome);
                tr.Name = $"New Thread#{i.ToString()} :3";
                tr.Start();
                Thread.Sleep(400);
            }
            
            Console.ReadKey();
        }

        private static void printSome()
        {
            // lock (locker)
            // {
                count = 1;
                for (int i = 0; i < 6; i++)
                {
                    Console.WriteLine($"{Thread.CurrentThread.Name}: {count}");
                    count++;
                    Thread.Sleep(400);
                }
            //}
        }
    }
}

/*
using System;
using System.Threading;

namespace Testing;

public class Numbers
{
    private int x,y;

    public Numbers(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
    
    public void PrintSome()
    {
        for (int i = 0; i < 10; i++)
        {
            Console.WriteLine($"My Thread + {x} and {y}");
            Thread.Sleep(500);
        }
    }
}*/